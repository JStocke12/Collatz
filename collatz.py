class collatz:
    def __init__(self):
        self.d = {2: [2,1]}

    def addValue(self, n):
        if not n in self.d.keys():
            c = (n%2 == 0)*(n//2)+(n%2 == 1)*(n*3+1)
            if c in self.d.keys():
                self.d[n] = [n]+self.d[c]
            else:
                self.addValue(c)
                self.addValue(n)

size = 10000
c = collatz()
[c.addValue(i) for i in range(3,size+1)]

def itemSortKey(e):
    return len(e[1])

collatzDictSorted = {k: v for k, v in sorted(c.d.items(), key=lambda item: len(item[1]))}

longestCollatz = list(collatzDictSorted.items())[-1]

print("The longest chain is generated by the number {}, with a length of {}. Here is the chain: {} \n".format(longestCollatz[0],len(longestCollatz[1]),longestCollatz[1]))

shortestCollatz = [(k, v) for k, v in collatzDictSorted.items() if not k in [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4098, 8192]][0]

print("The shortest chain which isn't generated by a power of two is generated by the number {}, with a length of {}. Here is the chain: {} \n".format(shortestCollatz[0],len(shortestCollatz[1]),shortestCollatz[1]))

collatzLengthAverage = sum([len(i) for i in c.d.values()])/len(c.d)

print("The average chain length is {}".format(collatzLengthAverage))
